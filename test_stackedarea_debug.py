#!/usr/bin/env python3
"""
Simple test script to understand stackedArea chart data structure
"""

import json

# Sample stackedArea chart data structure that should be generated by the backend
stackedarea_chart_data = {
    "chartType": "stackedArea",
    "config": {
        "title": "Deposit Mix Composition Over Time",
        "description": "Breakdown of deposit types over quarterly periods",
        "xAxisKey": "period",
        "xAxisLabel": "Quarter",
        "yAxisLabel": "Amount (Millions)",
        "showLegend": True,
        "legendPosition": "top",
        "showGrid": True,
        "stack": True,
        "colors": ["#3B82F6", "#10B981", "#F59E0B", "#EF4444"],
        "stacked": True  # Extra property for frontend compatibility
    },
    "data": [
        {
            "period": "Q1 2023",
            "name": "Q1 2023",
            "Demand Deposits": 150.5,
            "Savings Deposits": 120.3,
            "Time Deposits": 89.7,
            "Money Market": 45.2
        },
        {
            "period": "Q2 2023", 
            "name": "Q2 2023",
            "Demand Deposits": 155.8,
            "Savings Deposits": 125.1,
            "Time Deposits": 92.4,
            "Money Market": 48.9
        },
        {
            "period": "Q3 2023",
            "name": "Q3 2023", 
            "Demand Deposits": 160.2,
            "Savings Deposits": 130.5,
            "Time Deposits": 95.1,
            "Money Market": 52.3
        },
        {
            "period": "Q4 2023",
            "name": "Q4 2023",
            "Demand Deposits": 165.1,
            "Savings Deposits": 135.8,
            "Time Deposits": 98.6,
            "Money Market": 55.7
        }
    ],
    "chartConfig": {
        "Demand Deposits": {
            "label": "Demand Deposits",
            "color": "#3B82F6",
            "unit": "millions",
            "formatter": "currency"
        },
        "Savings Deposits": {
            "label": "Savings Deposits", 
            "color": "#10B981",
            "unit": "millions",
            "formatter": "currency"
        },
        "Time Deposits": {
            "label": "Time Deposits",
            "color": "#F59E0B", 
            "unit": "millions",
            "formatter": "currency"
        },
        "Money Market": {
            "label": "Money Market",
            "color": "#EF4444",
            "unit": "millions", 
            "formatter": "currency"
        }
    }
}

print("=== StackedArea Chart Data Structure ===")
print(json.dumps(stackedarea_chart_data, indent=2))

print("\n=== Data Keys Analysis ===")
if stackedarea_chart_data["data"]:
    first_item = stackedarea_chart_data["data"][0]
    data_keys = [key for key in first_item.keys() if key not in ['period', 'name', 'description', 'citation', 'timestamp', 'id']]
    print(f"Data keys (series): {data_keys}")
    print(f"Name key: {first_item.get('name', 'name')}")
    print(f"Period key: {first_item.get('period', 'N/A')}")

print(f"\n=== Chart Configuration ===")
print(f"Chart Type: {stackedarea_chart_data['chartType']}")
print(f"Stack Config: {stackedarea_chart_data['config'].get('stack', False)}")
print(f"Stacked Config: {stackedarea_chart_data['config'].get('stacked', False)}")
print(f"Show Legend: {stackedarea_chart_data['config'].get('showLegend', True)}")

print(f"\n=== Expected Behavior ===")
print("1. ChartRenderer should route stackedArea to AreaChart ✓")
print("2. AreaChart should use stackId='stack' for all areas ✓") 
print("3. EnhancedChart should handle stackedArea case ✓")
print("4. Chart should render with stacked areas showing composition over time")