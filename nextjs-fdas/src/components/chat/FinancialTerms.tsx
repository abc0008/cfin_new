'use client';

import React, { useState, useEffect } from 'react';
import { Info } from 'lucide-react';
import { ExpandableContent } from './InteractiveElements';

// Financial terms with their explanations
interface FinancialTerm {
  term: string;
  definition: string;
  category?: string;
}

// Sample financial terms dictionary - in a production app, this would come from an API/database
const FINANCIAL_TERMS: FinancialTerm[] = [
  {
    term: 'Revenue',
    definition: 'The total amount of income generated by a company through its business operations.',
    category: 'Income Statement'
  },
  {
    term: 'EBITDA',
    definition: 'Earnings Before Interest, Taxes, Depreciation, and Amortization. A measure of operational profitability.',
    category: 'Profitability'
  },
  {
    term: 'Current Ratio',
    definition: 'A liquidity ratio that measures a company\'s ability to pay short-term obligations. Calculated as current assets divided by current liabilities.',
    category: 'Liquidity'
  },
  {
    term: 'ROE',
    definition: 'Return on Equity. A measure of financial performance calculated by dividing net income by shareholders\' equity.',
    category: 'Profitability'
  },
  {
    term: 'Working Capital',
    definition: 'The difference between current assets and current liabilities, indicating short-term financial health.',
    category: 'Liquidity'
  },
  {
    term: 'Gross Margin',
    definition: 'The percentage of revenue that exceeds the cost of goods sold, calculated as (Revenue - COGS) / Revenue.',
    category: 'Profitability'
  },
  {
    term: 'Cash Flow',
    definition: 'The net amount of cash and cash equivalents being transferred in and out of a business.',
    category: 'Cash Flow'
  }
];

// Component for displaying detected financial terms
export interface FinancialTermsProps {
  text: string;
  className?: string;
}

export const FinancialTerms: React.FC<FinancialTermsProps> = ({ text, className = '' }) => {
  const [identifiedTerms, setIdentifiedTerms] = useState<FinancialTerm[]>([]);
  const [processedText, setProcessedText] = useState<string>(text);

  useEffect(() => {
    // Find financial terms in the text
    const foundTerms: FinancialTerm[] = [];
    let modifiedText = text;

    FINANCIAL_TERMS.forEach(term => {
      const regex = new RegExp(`\\b${term.term}\\b`, 'gi');
      if (regex.test(text)) {
        foundTerms.push(term);
        // Replace term with marked version for tooltip
        modifiedText = modifiedText.replace(
          regex,
          `<financial-term data-term="${term.term}">${term.term}</financial-term>`
        );
      }
    });

    setIdentifiedTerms(foundTerms);
    setProcessedText(modifiedText);
  }, [text]);

  if (identifiedTerms.length === 0) {
    return <span className={className}>{text}</span>;
  }

  return (
    <div className={className}>
      {/* Terms info panel */}
      <div className="mb-4 p-3 bg-primary/5 border border-primary/20 rounded-lg">
        <div className="flex items-center mb-2">
          <Info className="h-4 w-4 mr-2 text-primary" />
          <span className="font-avenir-pro-demi text-primary">Financial Terms Identified</span>
        </div>
        <div className="space-y-2">
          {identifiedTerms.map((term, index) => (
            <div key={index} className="p-3 bg-primary/10 rounded-md">
              <h4 className="font-avenir-pro-demi text-primary">{term.term}</h4>
              <p className="text-sm text-muted-foreground font-avenir-pro mt-1">{term.definition}</p>
              {term.category && (
                <span className="inline-block mt-2 px-2 py-1 bg-secondary/20 text-secondary text-xs rounded font-avenir-pro">
                  {term.category}
                </span>
              )}
            </div>
          ))}
        </div>
      </div>
      
      {/* Rendered text with tooltips */}
      <FinancialTextRenderer text={processedText} terms={identifiedTerms} />
    </div>
  );
};

interface FinancialTextRendererProps {
  text: string;
  terms: FinancialTerm[];
}

const FinancialTextRenderer: React.FC<FinancialTextRendererProps> = ({ text, terms }) => {
  const [hoveredTerm, setHoveredTerm] = useState<string | null>(null);

  // Parse the text and replace financial-term tags with interactive elements
  const renderTextWithTerms = (inputText: string) => {
    const parts = inputText.split(/(<financial-term[^>]*>.*?<\/financial-term>)/g);
    
    return parts.map((part, index) => {
      const termMatch = part.match(/<financial-term data-term="([^"]*)">(.*?)<\/financial-term>/);
      
      if (termMatch) {
        const termName = termMatch[1];
        const termText = termMatch[2];
        const term = terms.find(t => t.term.toLowerCase() === termName.toLowerCase());
        
        if (term) {
          return (
            <span
              key={index}
              className="relative inline-block text-primary border-b border-dotted border-primary/40 cursor-help font-avenir-pro"
              onMouseEnter={() => setHoveredTerm(termName)}
              onMouseLeave={() => setHoveredTerm(null)}
            >
              {termText}
              {hoveredTerm === termName && (
                <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 w-64 p-3 bg-card border border-border rounded-lg shadow-lg z-10">
                  <span className="font-avenir-pro-demi text-primary block">{term.term}</span>
                  <span className="text-sm text-muted-foreground font-avenir-pro">{term.definition}</span>
                  {term.category && (
                    <span className="inline-block mt-2 px-2 py-1 bg-secondary/20 text-secondary text-xs rounded font-avenir-pro">
                      {term.category}
                    </span>
                  )}
                </div>
              )}
            </span>
          );
        }
      }
      
      return <span key={index} className="font-avenir-pro">{part}</span>;
    });
  };

  return <div>{renderTextWithTerms(text)}</div>;
};

// Inline term highlighting component
export interface HighlightedTermProps {
  children: React.ReactNode;
  term: FinancialTerm;
}

export const HighlightedTerm: React.FC<HighlightedTermProps> = ({ children, term }) => {
  const [showTooltip, setShowTooltip] = useState(false);
  
  return (
    <span 
      className="relative inline-block text-blue-600 border-b border-dotted border-blue-400 cursor-help"
      onMouseEnter={() => setShowTooltip(true)}
      onMouseLeave={() => setShowTooltip(false)}
    >
      <span>{children}</span>
      {showTooltip && (
        <span className="absolute bottom-full left-0 mb-2 p-2 bg-white border border-gray-200 rounded shadow-lg z-10 max-w-xs block">
          <span className="font-medium text-blue-700 block">{term.term}</span>
          <span className="text-xs text-gray-700 mt-1 block">{term.definition}</span>
        </span>
      )}
    </span>
  );
};

// Function to process text and highlight financial terms
export function processFinancialTerms(text: string): React.ReactNode {
  if (!text) return '';
  
  // Find all financial terms in the text with their positions
  const termMatches: Array<{
    term: FinancialTerm;
    index: number;
    length: number;
  }> = [];
  
  // Find all matches for each term
  FINANCIAL_TERMS.forEach(term => {
    const regex = new RegExp(`\\b${term.term}\\b`, 'gi');
    let match;
    
    while ((match = regex.exec(text)) !== null) {
      termMatches.push({
        term,
        index: match.index,
        length: match[0].length
      });
    }
  });
  
  // Sort matches by their position in the text
  termMatches.sort((a, b) => a.index - b.index);
  
  // If no matches, return the original text
  if (termMatches.length === 0) {
    return text;
  }
  
  // Build an array of text parts and highlighted terms
  const result: React.ReactNode[] = [];
  let lastIndex = 0;
  
  termMatches.forEach((match, i) => {
    // Add text before the current match
    if (match.index > lastIndex) {
      result.push(text.substring(lastIndex, match.index));
    }
    
    // Add the highlighted term
    result.push(
      <HighlightedTerm key={`term-${i}`} term={match.term}>
        {text.substring(match.index, match.index + match.length)}
      </HighlightedTerm>
    );
    
    // Update the last index
    lastIndex = match.index + match.length;
  });
  
  // Add any remaining text after the last match
  if (lastIndex < text.length) {
    result.push(text.substring(lastIndex));
  }
  
  return result;
};
